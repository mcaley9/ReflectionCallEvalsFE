import { pgTable, text, timestamp, integer, boolean, jsonb } from "drizzle-orm/pg-core";

export const posthogCompletedAnalysisView = pgTable("posthog_completed_analysis_view", {
  analysisId: text("analysis_id"),
  posthogIdUuid: text("posthog_id_uuid"),
  sessionId: text("session_id"),
  userId: text("user_id"),
  fronteggId: text("frontegg_id"),
  clientId: text("client_id"),
  tenantId: text("tenant_id"),
  assignmentId: text("assignment_id"),
  plGroupId: text("pl_group_id"),
  scheduleId: text("schedule_id"),
  activityType: text("activity_type"),
  experienceType: text("experience_type"),
  startTime: timestamp("start_time"),
  endTime: timestamp("end_time"),
  recordingDuration: integer("recording_duration"),
  activeSeconds: integer("active_seconds"),
  inactiveSeconds: integer("inactive_seconds"),
  clickCount: integer("click_count"),
  keypressCount: integer("keypress_count"),
  mouseActivityCount: integer("mouse_activity_count"),
  publicUrl: text("public_url"),
  langfuseTraceUrl: text("langfuse_trace_url"),
  authPhaseSmooth: boolean("auth_phase_smooth"),
  authPhaseIssues: jsonb("auth_phase_issues"),
  selectionPhaseSmooth: boolean("selection_phase_smooth"),
  selectionPhaseIssues: jsonb("selection_phase_issues"),
  initiationPhaseSmooth: boolean("initiation_phase_smooth"),
  initiationPhaseIssues: jsonb("initiation_phase_issues"),
  reportReviewPhaseSmooth: boolean("report_review_phase_smooth"),
  reportReviewPhaseIssues: jsonb("report_review_phase_issues"),
  totalDurationSeconds: integer("total_duration_seconds"),
  excessTimeSeconds: integer("excess_time_seconds"),
  exceedsTarget: boolean("exceeds_target")
});

export const vapiCompletedAnalysisView = pgTable("vapi_completed_analysis_view", {
  analysisId: text("analysis_id"),
  vapiCallId: text("vapi_call_id"),
  sessionId: text("session_id"),
  userId: text("user_id"),
  clientId: text("client_id"),
  tenantId: text("tenant_id"),
  assignmentId: text("assignment_id"),
  plGroupId: text("pl_group_id"),
  scheduleId: text("schedule_id"),
  activityType: text("activity_type"),
  experienceType: text("experience_type"),
  callType: text("call_type"),
  startedAt: timestamp("started_at"),
  endedAt: timestamp("ended_at"),
  durationMinutes: integer("duration_minutes"),
  status: text("status"),
  endedReason: text("ended_reason"),
  greetStudentScore: text("greet_student_score"),
  greetStudentCriteria: jsonb("greet_student_criteria"),
  understandFeelingsScore: text("understand_feelings_score"),
  understandFeelingsCriteria: jsonb("understand_feelings_criteria"),
  provideOverviewScore: text("provide_overview_score"),
  provideOverviewCriteria: jsonb("provide_overview_criteria"),
  goalReviewScore: text("goal_review_score"),
  goalReviewCriteria: jsonb("goal_review_criteria"),
  competencyReviewScore: text("competency_review_score"),
  competencyReviewCriteria: jsonb("competency_review_criteria"),
  purposeReviewScore: text("purpose_review_score"),
  purposeReviewCriteria: jsonb("purpose_review_criteria"),
  keyEventsReflectionScore: text("key_events_reflection_score"),
  keyEventsReflectionCriteria: jsonb("key_events_reflection_criteria"),
  goalSettingScore: text("goal_setting_score"),
  goalSettingCriteria: jsonb("goal_setting_criteria"),
  closingScore: text("closing_score"),
  closingCriteria: jsonb("closing_criteria"),
  evaluationId: text("evaluation_id"),
  langfuseTraceUrl: text("langfuse_trace_url"),
  cleanedTranscript: text("cleaned_transcript"),
  createdAt: timestamp("created_at"),
  updatedAt: timestamp("updated_at"),
  processedAt: timestamp("processed_at"),
  analyzedAt: timestamp("analyzed_at")
}); 